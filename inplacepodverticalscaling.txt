## VPA Demo LAB - InPlacePodCcaling demo, available as beta feature in 1.33 ##
## In this demo, it's going to be tested the InplacePodVPAScaling feature, available
## as alpha in 1.27 and beta in 1.33, and enabled by default in this late version.
## Reference doc - https://kubernetes.io/docs/tasks/configure-pod-container/resize-container-resources

## If k8s < 1.33, add the following args:
kubelet-arg:
--feature-gates=InPlacePodVerticalScaling=true

Kcm-arg:
--feature-gates=InPlacePodVerticalScaling=true

kube-scheduler-arg:
--feature-gates=InPlacePodVerticalScaling=true

kube-apiserver-arg:
--feature-gates=InPlacePodVerticalScaling=true

################################
A - Resize CPU with no restart:
################################

1. Create the pod:

apiVersion: v1
kind: Pod
metadata:
  name: resize-demo
spec:
  containers:
  - name: pause
    image: registry.k8s.io/pause:3.8
    resizePolicy:
    - resourceName: cpu
      restartPolicy: NotRequired # Default, but explicit here
    - resourceName: memory
      restartPolicy: RestartContainer
    resources:
      limits:
        memory: "200Mi"
        cpu: "700m"
      requests:
        memory: "200Mi"
        cpu: "700m"


2. kubectl create -f pod-resize.yaml
   root@demo-cluster-all-dtb7d-m4vw4:~# kubectl apply -f demo-pod.yaml
   pod/resize-demo created

3. Increase assigned CPU resources , both requests and limits of the already running pod

   a. Check current status:
      kubectl get pod resize-demo --oyaml

   b. kubectl patch pod resize-demo --subresource resize --patch \
  '{"spec":{"containers":[{"name":"pause", "resources":{"requests":{"cpu":"800m"}, "limits":{"cpu":"800m"}}}]}}'

      root@demo-cluster-all-dtb7d-m4vw4:~# kubectl patch pod resize-demo --subresource resize --patch \
  '{"spec":{"containers":[{"name":"pause", "resources":{"requests":{"cpu":"800m"}, "limits":{"cpu":"800m"}}}]}}'
pod/resize-demo patched

   c. Check current pod status:
   ...
     containerStatuses:
  - allocatedResources:
      cpu: 800m
      memory: 200Mi
    containerID: containerd://f130f4ae7115f2f1588fe24f0006d33671ca757f53f8faf01d8126b6a2e4cc53
    image: registry.k8s.io/pause:3.8
    imageID: registry.k8s.io/pause@sha256:9001185023633d17a2f98ff69b6ff2615b8ea02a825adffa40422f51dfdcde9d
    lastState: {}
    name: pause
    ready: true
    resources:
      limits:
        cpu: 800m
        memory: 200Mi
      requests:
        cpu: 800m
        memory: 200Mi
    restartCount: 0

###############################
B.  Resize Memory with restart:  Increase the assigned memory to 300Mi
###############################

  1.  kubectl patch pod resize-demo --subresource resize --patch \
  '{"spec":{"containers":[{"name":"pause", "resources":{"requests":{"memory":"300Mi"}, "limits":{"memory":"300Mi"}}}]}}'

    # pod/resize-demo patched

  2. Check current pod memory allocations and restarts count:

    # kubectl get pod resize-demo -ojsonpath='{.status.containerStatuses}'

[{"allocatedResources":{"cpu":"800m","memory":"300Mi"},"containerID":"containerd://cfbab2d3059ecef0891717bbdb40f2ac5d9f75206ef86ed31349dfc4ee168adb","image":"registry.k8s.io/pause:3.8","imageID":"registry.k8s.io/pause@sha256:9001185023633d17a2f98ff69b6ff2615b8ea02a825adffa40422f51dfdcde9d","lastState":{"terminated":{"containerID":"containerd://f130f4ae7115f2f1588fe24f0006d33671ca757f53f8faf01d8126b6a2e4cc53","exitCode":0,"finishedAt":"2025-10-27T08:58:40Z","reason":"Completed","startedAt":"2025-10-27T08:53:02Z"}},"name":"pause","ready":true,"resources":{"limits":{"cpu":"800m","memory":"300Mi"},"requests":{"cpu":"800m","memory":"300Mi"}},"restartCount":1,"started":true,"state":{"running":{"startedAt":"2025-10-27T08:58:40Z"}},"user":{"linux":{"gid":0,"supplementalGroups":[0],"uid":65535}},"volumeMounts":[{"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","name":"kube-api-access-zsxpw","readOnly":true,"recursiveReadOnly":"Disabled"}]}]root@demo-cluster-all-dtb7d-m4vw4:~#



######################################################################
C.  Increase the requests by an unreasonable ammount of CPU or Memory
####################################################################

# Attempt to patch with an excessively large CPU request

# kubectl patch pod resize-demo --subresource resize --patch \
  '{"spec":{"containers":[{"name":"pause", "resources":{"requests":{"cpu":"1000"}, "limits":{"cpu":"1000"}}}]}}'

pod/resize-demo patched
# kubectl get pod resize-demo
NAME          READY   STATUS    RESTARTS        AGE
resize-demo   1/1     Running   1 (5m19s ago)   10m


## Check the status

# kubectl get pod resize-demo -oyaml
....

status:
  conditions:
  - lastProbeTime: "2025-10-27T09:03:51Z"
    lastTransitionTime: "2025-10-27T09:03:51Z"
    message: 'Node didn''t have enough capacity: cpu, requested: 1000000, capacity:
      2000'
    reason: Infeasible
    status: "True"
    type: PodResizePending
....

To fix this, you would need to patch the pod again with feasible resource values.
